{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red64\green11\blue217;\red255\green255\blue255;\red0\green0\blue0;
\red46\green174\blue187;\red159\green160\blue28;\red47\green180\blue29;\red180\green36\blue25;\red200\green20\blue201;
}
{\*\expandedcolortbl;;\cssrgb\c32308\c18668\c88227;\csgray\c100000;\csgray\c0;
\cssrgb\c20196\c73240\c78250;\cssrgb\c68468\c68012\c14208;\cssrgb\c20238\c73898\c14947;\cssrgb\c76409\c21698\c12524;\cssrgb\c83396\c23075\c82664;
}
\margl1440\margr1440\vieww12160\viewh14960\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs22 \cf2 \cb3 \CocoaLigature0 //-------------------------------------------------------------------------------
\f1\b0 \cf4 \

\f0\b \cf2 // Name: hw5.cpp
\f1\b0 \cf4 \

\f0\b \cf2 // Purpose: To play a simple Pokemon game using 2D arrays
\f1\b0 \cf4 \

\f0\b \cf2 // Authors: starter code: Joshua Burbridge and Susan Gauch
\f1\b0 \cf4 \

\f0\b \cf2 // completed code: Morgan Maness
\f1\b0 \cf4 \

\f0\b \cf2 // Date: April, 2018
\f1\b0 \cf4 \

\f0\b \cf2 //-------------------------------------------------------------------------------
\f1\b0 \cf4 \

\f0\b \cf5 #include
\f1\b0 \cf4  
\f0\b \cf6 <fstream>
\f1\b0 \cf4 \

\f0\b \cf5 #include
\f1\b0 \cf4  
\f0\b \cf6 <iomanip>
\f1\b0 \cf4 \

\f0\b \cf5 #include
\f1\b0 \cf4  
\f0\b \cf6 <iostream>
\f1\b0 \cf4 \
\cf7 using\cf4  \cf7 namespace\cf4  std;\
\
\cf7 const\cf4  \cf7 int\cf4  
\f0\b \cf8 ROWS
\f1\b0 \cf4  = 8;\
\cf7 const\cf4  \cf7 int\cf4  
\f0\b \cf8 COLS
\f1\b0 \cf4  = 8;\
\

\f0\b \cf2 //Character map for user moves
\f1\b0 \cf4 \
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 UP
\f1\b0 \cf4  = 
\f0\b \cf9 'w'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 LEFT
\f1\b0 \cf4  = 
\f0\b \cf9 'a'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 DOWN
\f1\b0 \cf4  = 
\f0\b \cf9 's'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 RIGHT
\f1\b0 \cf4  = 
\f0\b \cf9 'd'
\f1\b0 \cf4 ;\
\

\f0\b \cf2 //Character map for tile types
\f1\b0 \cf4 \
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 START
\f1\b0 \cf4  = 
\f0\b \cf9 'S'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 FINISH
\f1\b0 \cf4  = 
\f0\b \cf9 'F'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 SPACE
\f1\b0 \cf4  = 
\f0\b \cf9 ' '
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 WARP_LEFT
\f1\b0 \cf4  = 
\f0\b \cf9 '<'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 WARP_RIGHT
\f1\b0 \cf4  = 
\f0\b \cf9 '>'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 WARP_UP
\f1\b0 \cf4  = 
\f0\b \cf9 '^'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 WARP_DOWN
\f1\b0 \cf4  = 
\f0\b \cf9 'v'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 BOX
\f1\b0 \cf4  = 
\f0\b \cf9 'X'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 CHOICE
\f1\b0 \cf4  = 
\f0\b \cf9 'C'
\f1\b0 \cf4 ;\
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 TRACK
\f1\b0 \cf4  = 
\f0\b \cf9 'o'
\f1\b0 \cf4 ;\
\

\f0\b \cf2 //Character map for tile types
\f1\b0 \cf4 \
\cf7 const\cf4  \cf7 char\cf4  
\f0\b \cf8 PLAYER
\f1\b0 \cf4  = 
\f0\b \cf9 'A'
\f1\b0 \cf4 ;\
\

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \

\f0\b \cf2 // Name:  init
\f1\b0 \cf4 \

\f0\b \cf2 // Purpose:  This function opens a file, reads the dimensions of the map, and loads a map into the 2D array
\f1\b0 \cf4 \

\f0\b \cf2 //           It prints an error message to cerr if the file cannot be opened.
\f1\b0 \cf4 \

\f0\b \cf2 //           Any '.' in the map file are converted to spaces in the array.
\f1\b0 \cf4 \

\f0\b \cf2 // Parameters:  filename, const string, the file holding the map
\f1\b0 \cf4 \

\f0\b \cf2 //
\f1\b0 \cf4               
\f0\b \cf2 map, 2D array of characters, the map filled in from the file
\f1\b0 \cf4 \

\f0\b \cf2 //
\f1\b0 \cf4               
\f0\b \cf2 path, 2D array of characters, sets the path to the start location
\f1\b0 \cf4 \

\f0\b \cf2 //
\f1\b0 \cf4               
\f0\b \cf2 playerRow, int, the player row location (updated by fn)
\f1\b0 \cf4 \

\f0\b \cf2 //
\f1\b0 \cf4               
\f0\b \cf2 playerCol, int, the player col location (updated by fn)
\f1\b0 \cf4 \

\f0\b \cf2 // Returns: void
\f1\b0 \cf4 \

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \
\cf7 void\cf4  init(\cf7 const\cf4  string filename, \cf7 char\cf4  map[
\f0\b \cf8 ROWS
\f1\b0 \cf4 ][
\f0\b \cf8 COLS
\f1\b0 \cf4 ], \cf7 char\cf4  path[
\f0\b \cf8 ROWS
\f1\b0 \cf4 ][
\f0\b \cf8 COLS
\f1\b0 \cf4 ], \cf7 int\cf4  &playerRow, \cf7 int\cf4  &playerCol)\{\
    
\f0\b \cf2 //Open the file
\f1\b0 \cf4 \
    ifstream din(filename.c_str());\
    
\f0\b \cf6 if
\f1\b0 \cf4  (!din)\
       cerr << 
\f0\b \cf6 "Could not open "
\f1\b0 \cf4  << filename << 
\f0\b \cf6 "\\n."
\f1\b0 \cf4 ;\
    
\f0\b \cf6 else
\f1\b0 \cf4 \
    \{\
       
\f0\b \cf2 //Set the player location
\f1\b0 \cf4 \
       playerRow = 
\f0\b \cf8 ROWS
\f1\b0 \cf4  - 1;\
       playerCol = 0;\
\
       
\f0\b \cf2 //Iterate over the rows and the columns
\f1\b0 \cf4 \
       
\f0\b \cf6 for
\f1\b0 \cf4 (\cf7 int\cf4  row = 0; row < 
\f0\b \cf8 ROWS
\f1\b0 \cf4 ; row++)\
           
\f0\b \cf6 for
\f1\b0 \cf4 (\cf7 int\cf4  col = 0; col < 
\f0\b \cf8 COLS
\f1\b0 \cf4 ; col++)\
           \{\
               
\f0\b \cf2 //Read the data into the map
\f1\b0 \cf4 \
               din >> map[row][col];\
               
\f0\b \cf6 if
\f1\b0 \cf4  (map[row][col] == 
\f0\b \cf9 '.'
\f1\b0 \cf4 )\
                  map[row][col] = 
\f0\b \cf8 SPACE
\f1\b0 \cf4 ;  
\f0\b \cf2 //convert from the . in the file to SPACE in the array
\f1\b0 \cf4 \
\
               
\f0\b \cf2 //Init the path with the START and FINISH locations
\f1\b0 \cf4 \
               
\f0\b \cf2 //Fill the rest of the path with spaces
\f1\b0 \cf4 \
               
\f0\b \cf6 if
\f1\b0 \cf4  (map[row][col] == 
\f0\b \cf8 START
\f1\b0 \cf4  || map[row][col] == 
\f0\b \cf8 FINISH
\f1\b0 \cf4 )\
                   path[row][col] = map[row][col];\
               
\f0\b \cf6 else
\f1\b0 \cf4 \
                   path[row][col] = 
\f0\b \cf8 SPACE
\f1\b0 \cf4 ;\
           \}\
\
       
\f0\b \cf2 //Close the file
\f1\b0 \cf4 \
       din.close();\
   \}\
\}\
\

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \

\f0\b \cf2 // Name:  print
\f1\b0 \cf4 \

\f0\b \cf2 // Purpose:  This function prints the map to the screen
\f1\b0 \cf4 \

\f0\b \cf2 // Parameters:  map, const 2D array of characters, stores the map
\f1\b0 \cf4 \

\f0\b \cf2 //
\f1\b0 \cf4               
\f0\b \cf2 path, const 2D array of characters, stores the player path
\f1\b0 \cf4 \

\f0\b \cf2 //
\f1\b0 \cf4               
\f0\b \cf2 playerRow, const int, the player row location
\f1\b0 \cf4 \

\f0\b \cf2 //
\f1\b0 \cf4               
\f0\b \cf2 playerCol, const int, the player col location
\f1\b0 \cf4 \

\f0\b \cf2 // Returns: void
\f1\b0 \cf4 \

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \
\cf7 void\cf4  print(\cf7 const\cf4  \cf7 char\cf4  map[
\f0\b \cf8 ROWS
\f1\b0 \cf4 ][
\f0\b \cf8 COLS
\f1\b0 \cf4 ], \cf7 const\cf4  \cf7 char\cf4  path[
\f0\b \cf8 ROWS
\f1\b0 \cf4 ][
\f0\b \cf8 COLS
\f1\b0 \cf4 ], \cf7 const\cf4  \cf7 int\cf4  playerRow, \cf7 const\cf4  \cf7 int\cf4  playerCol)\
\{\
cout << 
\f0\b \cf6 "Here is the map and path.  The legend is:\\n"
\f1\b0 \cf4 \
     << 
\f0\b \cf6 "   S - start, F - finish\\n"
\f1\b0 \cf4 \
     << 
\f0\b \cf6 "   < - warp left, > - warp right, ^ - warp up, v - warp down\\n"
\f1\b0 \cf4 \
     << 
\f0\b \cf6 "   X - box, C - choice \\n"
\f1\b0 \cf4 \
     << 
\f0\b \cf6 "   A - your location, o - your track\\n"
\f1\b0 \cf4 ;\
\
    
\f0\b \cf2 // print the map top border
\f1\b0 \cf4 \
    cout << 
\f0\b \cf6 "\\nMAP:\\t\\t\\t\\t\\tPATH:\\n-"
\f1\b0 \cf4 ;\
    
\f0\b \cf6 for
\f1\b0 \cf4 (\cf7 int\cf4  col = 0; col < 
\f0\b \cf8 COLS
\f1\b0 \cf4 ; col++)\
        cout << 
\f0\b \cf6 "----"
\f1\b0 \cf4 ;\
    cout << 
\f0\b \cf6 "\\t-"
\f1\b0 \cf4 ;\
\
    
\f0\b \cf2 // print the path top border
\f1\b0 \cf4 \
    
\f0\b \cf6 for
\f1\b0 \cf4 (\cf7 int\cf4  col = 0; col < 
\f0\b \cf8 COLS
\f1\b0 \cf4 ; col++)\
        cout << 
\f0\b \cf6 "----"
\f1\b0 \cf4 ;\
    cout << 
\f0\b \cf6 "\\n"
\f1\b0 \cf4 ;\
\
    
\f0\b \cf2 // print the map contents and the path
\f1\b0 \cf4 \
    
\f0\b \cf2 // replace any . stored in the array with spaces on screen to look nicer
\f1\b0 \cf4 \
    
\f0\b \cf6 for
\f1\b0 \cf4 (\cf7 int\cf4  row= 0; row < 
\f0\b \cf8 ROWS
\f1\b0 \cf4 ; row++)\
    \{\
        
\f0\b \cf2 // print the map
\f1\b0 \cf4 \
        cout << 
\f0\b \cf6 "|"
\f1\b0 \cf4 ;\
        
\f0\b \cf6 for
\f1\b0 \cf4 (\cf7 int\cf4  col = 0; col < 
\f0\b \cf8 COLS
\f1\b0 \cf4 ; col++)\
        \{\
            
\f0\b \cf6 if
\f1\b0 \cf4  (playerRow == row && playerCol == col)\
                cout << setw(2) << 
\f0\b \cf8 PLAYER
\f1\b0 \cf4  << setw(2) << 
\f0\b \cf6 " |"
\f1\b0 \cf4 ;\
            
\f0\b \cf6 else
\f1\b0 \cf4 \
                cout << setw(2) << map[row][col] << setw(2) << 
\f0\b \cf6 " |"
\f1\b0 \cf4 ;\
        \}\
\
        
\f0\b \cf2 // print the map bottom border
\f1\b0 \cf4 \
        cout << 
\f0\b \cf6 "\\n-"
\f1\b0 \cf4 ;\
        
\f0\b \cf6 for
\f1\b0 \cf4 (\cf7 int\cf4  col = 0; col < 
\f0\b \cf8 COLS
\f1\b0 \cf4 ; col++)\
            cout << 
\f0\b \cf6 "----"
\f1\b0 \cf4 ;\
\
        
\f0\b \cf2 // print the path bottom border
\f1\b0 \cf4 \
        cout << 
\f0\b \cf6 "\\t-"
\f1\b0 \cf4 ;\
        
\f0\b \cf6 for
\f1\b0 \cf4 (\cf7 int\cf4  col = 0; col < 
\f0\b \cf8 COLS
\f1\b0 \cf4 ; col++)\
            cout << 
\f0\b \cf6 "----"
\f1\b0 \cf4 ;\
        cout << 
\f0\b \cf6 "\\n"
\f1\b0 \cf4 ;\
    \}\
    cout << 
\f0\b \cf6 "\\n"
\f1\b0 \cf4 ;\
\}\
\

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \

\f0\b \cf2 // Name:  gameOver
\f1\b0 \cf4 \

\f0\b \cf2 // Purpose:  This function checks to see if the game is over, i.e., the player
\f1\b0 \cf4 \

\f0\b \cf2 //           has reached the FINISH tile.
\f1\b0 \cf4 \

\f0\b \cf2 // Parameters: int row and int column
\f1\b0 \cf4 \

\f0\b \cf2 // Returns:  true if the player has reached the FINISH tile; false otherwise
\f1\b0 \cf4 \

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \
\cf7 bool\cf4  gameOver(\cf7 int\cf4  x, \cf7 int\cf4  y)\
\{\
   \cf7 bool\cf4  game;\
   
\f0\b \cf6 if
\f1\b0 \cf4  (y==
\f0\b \cf8 COLS
\f1\b0 \cf4  && x==0)\
      game=true;\
   
\f0\b \cf6 else
\f1\b0 \cf4 \
      game=false;\
   \cf9 \cb3 return\cf4 \cb3  game;\
\}\
\

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \

\f0\b \cf2 // Name:  getMove
\f1\b0 \cf4 \

\f0\b \cf2 // Purpose:  This function gets the next move direction from the user.
\f1\b0 \cf4 \

\f0\b \cf2 //           It keeps asking until a valid direction is entered
\f1\b0 \cf4 \

\f0\b \cf2 // Parameters: None
\f1\b0 \cf4 \

\f0\b \cf2 // Returns:  move, char, the valid character entered
\f1\b0 \cf4 \

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \
\cf7 char\cf4  getMove()\
\{\
   \cf7 char\cf4  move;\
   cout << 
\f0\b \cf6 "Enter a move (w, a, s, d):"
\f1\b0 \cf4 ;\
   cin >> move;\
   
\f0\b \cf6 while
\f1\b0 \cf4 (move!=
\f0\b \cf8 UP
\f1\b0 \cf4  && move!=
\f0\b \cf8 LEFT
\f1\b0 \cf4  && move!=
\f0\b \cf8 DOWN
\f1\b0 \cf4  && move!=
\f0\b \cf8 RIGHT
\f1\b0 \cf4 )\
   \{\
      cout << 
\f0\b \cf6 "Invalid choice must be w, a, s, or d):"
\f1\b0 \cf4 ;\
      cin >> move;\
   \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf9 \cb3 return\cf4 \cb3  move;\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \

\f0\b \cf2 // Name:  legal
\f1\b0 \cf4 \

\f0\b \cf2 // Purpose:  This function checks whether or not the user can  make the move requested
\f1\b0 \cf4 \

\f0\b \cf2 //           by the user.  Illegal moves are those that would move the user off the map
\f1\b0 \cf4 \

\f0\b \cf2 //           or land the user in a box.
\f1\b0 \cf4 \

\f0\b \cf2 // Parameters: char getMove, int x, int y, char map[ROWS][COLS]
\f1\b0 \cf4 \

\f0\b \cf2 // Returns:  true if the user can make the move, false otherwise
\f1\b0 \cf4 \

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \
\cf7 bool\cf4  legal(\cf7 char\cf4  gMove, \cf7 int\cf4  y, \cf7 const\cf4  \cf7 char\cf4  map[
\f0\b \cf8 ROWS
\f1\b0 \cf4 ][
\f0\b \cf8 COLS
\f1\b0 \cf4 ], \cf7 int\cf4  x)\
\{\
   
\f0\b \cf2 //first look at place on array to be moved to
\f1\b0 \cf4 \
   
\f0\b \cf2 //then check if off map
\f1\b0 \cf4 \
   
\f0\b \cf2 //then check if space is blocked
\f1\b0 \cf4 \
  
\f0\b \cf2 //return bool true or false accordingly
\f1\b0 \cf4 \
   \cf7 bool\cf4  move=true;\
   
\f0\b \cf6 if
\f1\b0 \cf4 (gMove==
\f0\b \cf8 UP
\f1\b0 \cf4 )\
   \{\
      
\f0\b \cf6 if
\f1\b0 \cf4 (x>=
\f0\b \cf8 COLS
\f1\b0 \cf4 )
\f0\b \cf2 // || map[x+1][y]==BOX)
\f1\b0 \cf4 \
         move=false;\
   \}\
   
\f0\b \cf6 else
\f1\b0 \cf4  
\f0\b \cf6 if
\f1\b0 \cf4 (gMove==
\f0\b \cf8 LEFT
\f1\b0 \cf4 )\
   \{\
      
\f0\b \cf6 if
\f1\b0 \cf4 (y-1<0)
\f0\b \cf2 // || map[x][y-1]==BOX)
\f1\b0 \cf4 \
         move=false;\
   \}\
   
\f0\b \cf6 else
\f1\b0 \cf4  
\f0\b \cf6 if
\f1\b0 \cf4 (gMove==
\f0\b \cf8 DOWN
\f1\b0 \cf4 )\
   \{\
      
\f0\b \cf6 if
\f1\b0 \cf4 (x-1<0)
\f0\b \cf2 // || map[x-1][y]==BOX)
\f1\b0 \cf4 \
         move=false;\
   \}\
   
\f0\b \cf6 else
\f1\b0 \cf4 \
   \{\
      
\f0\b \cf6 if
\f1\b0 \cf4 (x+1>=
\f0\b \cf8 ROWS
\f1\b0 \cf4 )
\f0\b \cf2 // || map[x+1][y]==BOX)
\f1\b0 \cf4 \
         move=false;\
   \}\
   \cf9 \cb3 return\cf4 \cb3  move;\
\}\
\

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \

\f0\b \cf2 // Name:  makeMove
\f1\b0 \cf4 \

\f0\b \cf2 // Purpose:  This makes the move selected by the user.
\f1\b0 \cf4 \

\f0\b \cf2 //           It assumes that the move has already been checked and is legal.
\f1\b0 \cf4 \

\f0\b \cf2 //           It updates the player' location and adds that location to the PATH.
\f1\b0 \cf4 \

\f0\b \cf2 //           It then examines the tile the user just moved to to see if it causes any
\f1\b0 \cf4 \

\f0\b \cf2 //           side effects.
\f1\b0 \cf4 \

\f0\b \cf2 //           If the new tile is a space tile, keep going.
\f1\b0 \cf4 \

\f0\b \cf2 //             (i.e., warping to another location);  if so, it then
\f1\b0 \cf4 \

\f0\b \cf2 //           updates the player location again
\f1\b0 \cf4 \

\f0\b \cf2 // Parameters: ???
\f1\b0 \cf4 \

\f0\b \cf2 // Returns:  void
\f1\b0 \cf4 \

\f0\b \cf2 //-----------------------------------------------------------------------------------
\f1\b0 \cf4 \
\cf7 void\cf4  makeMove(\cf7 int\cf4  &x, \cf7 int\cf4  &y, \cf7 char\cf4  move, \cf7 const\cf4  \cf7 char\cf4  map[
\f0\b \cf8 ROWS
\f1\b0 \cf4 ][
\f0\b \cf8 COLS
\f1\b0 \cf4 ], \cf7 char\cf4  path[
\f0\b \cf8 ROWS
\f1\b0 \cf4 ][
\f0\b \cf8 COLS
\f1\b0 \cf4 ])\
\{\
   \cf7 bool\cf4  cont=true;\
   
\f0\b \cf2 //add circle to path
\f1\b0 \cf4 \
   
\f0\b \cf2 //check for black spaces
\f1\b0 \cf4 \
   
\f0\b \cf2 //check for arrows
\f1\b0 \cf4 \
   
\f0\b \cf2 //repeat until you see c
\f1\b0 \cf4 \
      path[x][y]=
\f0\b \cf8 TRACK
\f1\b0 \cf4 ;\
      
\f0\b \cf6 if
\f1\b0 \cf4 (move==
\f0\b \cf8 UP
\f1\b0 \cf4 )\
      \{\
         x=x-1;\
         
\f0\b \cf6 while
\f1\b0 \cf4 (map[x-1][y]==
\f0\b \cf8 SPACE
\f1\b0 \cf4 )\
         \{\
            x=x+1;\
            path[x][y]=
\f0\b \cf8 TRACK
\f1\b0 \cf4 ;\
         \}\
      \}\
      
\f0\b \cf6 else
\f1\b0 \cf4  
\f0\b \cf6 if
\f1\b0 \cf4 (move==
\f0\b \cf8 LEFT
\f1\b0 \cf4 )\
      \{\
         y=y-1;\
         
\f0\b \cf6 while
\f1\b0 \cf4 (map[x][y-1]==
\f0\b \cf8 SPACE
\f1\b0 \cf4 )\
         \{\
            y=y-1;\
            path[x][y]=
\f0\b \cf8 TRACK
\f1\b0 \cf4 ;\
         \}\
      \}\
      
\f0\b \cf6 else
\f1\b0 \cf4 \
      \{\
         y=y+1;\
         
\f0\b \cf6 while
\f1\b0 \cf4 (map[x][y+1]==
\f0\b \cf8 SPACE
\f1\b0 \cf4 )\
         \{\
            y=y+1;\
            path[x][y]=
\f0\b \cf8 TRACK
\f1\b0 \cf4 ;\
         \}\
      \}\

\f0\b \cf2 /*   while(cont)
\f1\b0 \cf4 \

\f0\b \cf2    \{
\f1\b0 \cf4 \

\f0\b \cf2       if(map[x][y]==CHOICE)
\f1\b0 \cf4 \

\f0\b \cf2          cont=false;
\f1\b0 \cf4 \

\f0\b \cf2       else if(map[x][y]==WARP_LEFT)
\f1\b0 \cf4 \

\f0\b \cf2       \{
\f1\b0 \cf4 \

\f0\b \cf2          x=x-1;
\f1\b0 \cf4 \

\f0\b \cf2          path[x][y]=TRACK;
\f1\b0 \cf4 \

\f0\b \cf2       \}
\f1\b0 \cf4 \

\f0\b \cf2       else if(map[x][y]==WARP_RIGHT)
\f1\b0 \cf4 \

\f0\b \cf2       \{
\f1\b0 \cf4 \

\f0\b \cf2          x=x+1;
\f1\b0 \cf4 \

\f0\b \cf2          path[x][y]=TRACK;
\f1\b0 \cf4 \

\f0\b \cf2       \}
\f1\b0 \cf4 \

\f0\b \cf2       else if(map[x][y]==WARP_UP)
\f1\b0 \cf4 \

\f0\b \cf2       \{
\f1\b0 \cf4 \

\f0\b \cf2          y=y-1;
\f1\b0 \cf4 \

\f0\b \cf2          path[x][y]=TRACK;
\f1\b0 \cf4 \

\f0\b \cf2       \}
\f1\b0 \cf4 \

\f0\b \cf2       else if(map[x][y]==WARP_DOWN)
\f1\b0 \cf4 \

\f0\b \cf2       \{
\f1\b0 \cf4 \

\f0\b \cf2          y=y+1;
\f1\b0 \cf4 \

\f0\b \cf2          path[x][y]=TRACK;
\f1\b0 \cf4 \

\f0\b \cf2       \}
\f1\b0 \cf4 \

\f0\b \cf2    \}
\f1\b0 \cf4 \

\f0\b \cf2    path[x][y]=PLAYER;
\f1\b0 \cf4 \

\f0\b \cf2 */
\f1\b0 \cf4       print(map, path, x, y);\
\}\
\
\cf7 int\cf4  main()\
\{\
   
\f0\b \cf2 //Declare two 2D char arrays for the map and path
\f1\b0 \cf4 \
    
\f0\b \cf2 //Each array should have ROWS rows and COLS cols
\f1\b0 \cf4 \
   \cf7 char\cf4  map[
\f0\b \cf8 ROWS
\f1\b0 \cf4 ][
\f0\b \cf8 COLS
\f1\b0 \cf4 ];\
   \cf7 char\cf4  path[
\f0\b \cf8 ROWS
\f1\b0 \cf4 ][
\f0\b \cf8 COLS
\f1\b0 \cf4 ];\
    
\f0\b \cf2 //Declare two ints to keep track of the player location, their row and col in the map
\f1\b0 \cf4 \
   \cf7 int\cf4  x=0;\
   \cf7 int\cf4  y=0;\
   \cf7 char\cf4  move;\
    
\f0\b \cf2 //Initialize the map and path and player location for a new game from file "map.txt"
\f1\b0 \cf4 \
   init(
\f0\b \cf6 "map.txt"
\f1\b0 \cf4 , map, path, x, y);\
    
\f0\b \cf2 //While we have not won the game by reaching the top right corner
\f1\b0 \cf4 \
    
\f0\b \cf2 //do
\f1\b0 \cf4 \
   
\f0\b \cf6 do
\f1\b0 \cf4 \
   \{\
        
\f0\b \cf2 //Print map and path
\f1\b0 \cf4 \
      print(map, path, x, y);\
        
\f0\b \cf2 //Get a valid type of move from the player
\f1\b0 \cf4 \
      move=getMove();\
        
\f0\b \cf2 //Check the move to see if it is legal
\f1\b0 \cf4 \
      
\f0\b \cf6 if
\f1\b0 \cf4 (legal(move, y, map, x)==true)\
      \{\
         
\f0\b \cf2 //If the move is legal, make it
\f1\b0 \cf4 \
         makeMove(x, y, move, map, path);\
      \}\
           
\f0\b \cf2 //Check to see if the user has won after the move
\f1\b0 \cf4 \
      
\f0\b \cf6 else
\f1\b0 \cf4 \
         cout <<
\f0\b \cf6 "Invalid move"
\f1\b0 \cf4  << endl << endl;\
    
\f0\b \cf2 //while(the user has not won)
\f1\b0 \cf4 \
   \}
\f0\b \cf6 while
\f1\b0 \cf4 (gameOver(x, y)==false);\
    
\f0\b \cf2 //If the player won the game, print a congratulatory message
\f1\b0 \cf4 \
   cout << 
\f0\b \cf6 "CONGRATULATIONS!!! You found the silph scope!"
\f1\b0 \cf4  << endl;\
    \cf9 \cb3 return\cf4 \cb3  0;\
\}\
\
\
\
}